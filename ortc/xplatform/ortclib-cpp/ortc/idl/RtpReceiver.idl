/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.

 */

namespace org
{
  namespace ortc
  {
    /// <summary>
    /// The RTCRtpContributingSource object contains information about a
    /// contributing source. Each time an RTP packet is received, the
    /// RTCRtpContributingSource objects are updated. If the RTP packet
    /// contains CSRCs, then the RTCRtpContributingSource objects
    /// corresponding to those CSRCs are updated, and the level values for
    /// those CSRCs are updated based on the mixer-client header extension
    /// [RFC6464] if present. If the RTP packet contains no CSRCs, then the
    /// RTCRtpContributingSource object corresponding to the SSRC is updated,
    /// and the level value for the SSRC is updated based on the client-mixer
    /// header extension [RFC6464] if present.
    /// </summary>
    [dictionary]
    struct RTCRtpContributingSource
    {
      /// <summary>
      /// Gets the timestamp indicating the time of reception of the most
      /// recent RTP packet containing the source. The timestamp corresponds
      /// to a local clock.
      /// </summary>
      Time            timestamp;
      /// <summary>
      /// Gets the CSRC or SSRC value of the contributing source.
      /// </summary>
      SsrcType        csrc;
      /// <summary>
      /// The audio level contained in the last RTP packet received from this
      /// source. If the source was set from an SSRC, this will be the level
      /// value in [RFC6464]. If the source was set from a CSRC, this will be
      /// the level value in [RFC6465]. Both [RFC6464] and [RFC6465] define
      /// the level as a integral value from 0 to 127 representing the audio
      /// level in negative decibels relative to the loudest signal that they
      /// system could possibly encode. Thus, 0 represents the loudest signal
      /// the system could possibly encode, and 127 represents silence.
      /// </summary>
      uint8           audioLevel;
      /// <summary>
      /// Gets whether the last RTP packet received from this source contains
      /// voice activity ("true") or not ("false"). Since the "V" bit is
      /// supported in [RFC6464] but not [RFC6465], the voiceActivityFlag
      /// attribute will only be set when receivers enable the client-mixer
      /// header extension (setting the vad attribute to "true"), and when RTP
      /// packets are received from senders enabling the client-mixer header
      /// extension (setting the vad attribute to "true").
      /// </summary>
      [optional]
      bool            voiceActivityFlag;

      /// <summary>
      /// Constructs an empty instance of an RTCRtpContributingSource.
      /// </summary>
      [constructor, default]
      void RTCRtpContributingSource();

      /// <summary>
      /// Return a hash of the data contained within the object.
      /// </summary>
      string hash();
    };

    /// <summary>
    /// The RTCRtpReceiver includes information relating to the RTP receiver.
    /// </summary>
    interaction RTCRtpReceiver : RTCStatsProvider
    {
      typedef std::list<RTCRtpContributingSource> ContributingSourceList;

      /// <summary>
      /// Constructs an instance of RTCRtpReceiver from a value of kind and an
      /// RTCDtlsTransport object. If an attempt is made to construct an
      /// RTCRtpReceiver object with transport.State  "closed", throw an
      /// InvalidStateError exception. Upon construction, Track is set, and
      /// the value of track.Kind is determined based on the value of kind
      /// passed in the constructor.      
      /// </summary>
      [constructor]
      void RTCRtpReceiver(
                          MediaStreamTrackKind kind,
                          RTCRtpTransport transport,
                          ) throws (InvalidParameters, InvalidStateError);
      /// <summary>
      /// Constructs an instance of RTCRtpReceiver from a value of kind and an
      /// RTCDtlsTransport object. If an attempt is made to construct an
      /// RTCRtpReceiver object with transport.State or rtcpTransport.State
      /// "closed", throw an InvalidStateError exception. Upon construction,
      /// Track is set, and the value of track.Kind is determined based on
      /// the value of kind passed in the constructor.      
      /// </summary>
      [constructor, altname(RTCRtpReceiverWithRtcpTransport)]
      void RTCRtpReceiver(
                          MediaStreamTrackKind kind,
                          RTCRtpTransport transport,
                          RTCRtcpTransport rtcpTransport
                          ) throws(InvalidParameters, InvalidStateError);

      /// <summary>
      /// Gets a unique object instance identifier for this object.
      /// </summary>
      [getter]
      puid objectId;

      /// <summary>
      /// Gets the associated MediaStreamTrack instance. Upon construction, Track
      /// is set. The value of track.kind is determined based on the value of
      /// kind passed in the constructor.
      /// </summary>
      [getter]
      MediaStreamTrack track;

      /// <summary>
      /// Gets the associated RTP RTCDtlsTransport instance.
      /// </summary>
      [getter]
      RTCRtpTransport transport;

      /// <summary>
      /// Gets the RTCDtlsTransport instance over which RTCP is sent and
      /// received. When BUNDLE is used, many RTCRtpReceiver objects will
      /// share one rtcpTransport and will all send and receive RTCP over the
      /// same RTCDtlsTransport. When RTCP mux is used, rtcpTransport will be
      /// null, and both RTP and RTCP traffic will flow over the
      /// RTCDtlsTransport transport.
      /// </summary>
      [getter, nullable]
      RTCRtcpTransport rtcpTransport;

      /// <summary>
      /// Set the RTP RTCDtlsTransport. If the last call to
      /// receive(parameters) had parameters.Rtcp.Mux set to false, throw an
      /// InvalidParameters exception. If SetTransport() is called and
      /// transport.State is "closed", throw an InvalidParameters exception.
      /// </summary>
      void setTransport(RTCRtpTransport transport) throws (InvalidParameters, InvalidStateError);
      /// <summary>
      /// Set the RTP RTCSrtpSdesTransport. If the last call to
      /// receive(parameters) had parameters.Rtcp.Mux set to false, throw an
      /// InvalidParameters exception.
      /// </summary>
      [altname(setTransportWithRtcpTransport)]
      void setTransport(
                        RTCRtpTransport transport,
                        RTCRtcpTransport rtcpTransport
                        ) throws(InvalidParameters, InvalidStateError);

      /// <summary>
      /// Obtain the receiver capabilities, based on kind. Capabilities such
      /// as retransmission [RFC4588], redundancy [RFC2198], and Forward Error
      /// Correction that do not have an associated value of kind are always
      /// included, regardless of the value of kind passed to
      /// GetCapabilities().
      /// </summary>
      [static]
      RTCRtpCapabilities getCapabilities([optional] MediaStreamTrackKind kind);

      /// <summary>
      /// Media to be received is controlled by parameters. If
      /// Receive(parameters) is called with invalid parameters, throw an
      /// InvalidParameters exception. If rtcpTransport is not set and
      /// Receive(parameters) is called with parameters.rtcp.mux set to false,
      /// throw an InvalidParameters exception. The Receive() method does not
      /// update parameters based on what is currently being received, so that
      /// the value of parameters remains that last passed to the Receive()
      /// method. The RTCRtpReceiver object starts receiving when Receive() is
      /// called for the first time, and changes the receiving parameters when
      /// Receive() is called again. The RTCRtpReceiver object stops receiving
      /// when Stop() is called. For each value of i from 0 to the number of
      /// codecs, check that each value of parameters.codecs[i].name not equal
      /// to "red", "rtx" or a forward error correction codec is included in
      /// GetCapabilities(kind).codecs[j].name, where j goes from 0 to the
      /// number of codecs, and kind takes the value passed in the
      /// RTCRtpReceiver constructor. If no match is found for any value of i,
      /// throw an InvalidParameters exception. SSRC misusage also results in
      /// an InvalidParameters exception.
      /// </summary>
      zs::Promise receive(RTCRtpParameters parameters) throws (InvalidParameters, InvalidStateError);
      /// <summary>
      /// Stops receiving the track on the wire. Stop is final like
      /// MediaStreamTrack.
      /// </summary>
      void stop();

      /// <summary>
      /// Returns an RTCRtpContributingSource object for each unique CSRC or
      /// SSRC received by this RTCRtpReceiver. The browser must keep
      /// information from RTP packets received in the last 10 seconds. If no
      /// contributing sources are available, an empty list is returned.
      /// </summary>
      ContributingSourceList getContributingSources();

      /// <summary>
      /// Solely used by the H.264/UC codec; for a receiver to request an SSRC from a sender (and not implemented by this client).
      /// </summary>
      void requestSendCsrc(SsrcType csrc);
    };

  }
}
