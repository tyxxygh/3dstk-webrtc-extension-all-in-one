/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */

namespace org
{
  namespace ortc
  {
      /// <summary>
      /// An base object representing a gathered ICE candidate.
      /// </summary>
    struct RTCIceGathererCandidate
    {
      [constructor, delete]
      void RTCIceGathererCandidate();

      /// <summary>
      /// Gets or sets the the component of the ICE candidate to indicate
      /// if the candidate is related to RTP or RTCP.
      /// </summary>
      [getter]
      RTCIceComponent  component;

      /// <summary>
      /// Return a new instance of an RTCIceGathererCandidate by extracting out the candidate
      /// information from the JSON object.
      /// </summary>
      [static, default]
      RTCIceGathererCandidate create(Json json);

      /// <summary>
      /// A helper routine to convert the object's data to structured JSON object data.
      /// </summary>
      Json toJson();
      /// <summary>
      /// Return a hash of the data contained within the object.
      /// </summary>
      string hash();
    };

    /// <summary>
    /// The RTCIceCandidate object includes information relating to an ICE
    /// candidate.
    /// </summary>
    struct RTCIceCandidate : RTCIceGathererCandidate
    {
      /// <summary>
      /// Gets or sets the type of interface this candidate was gathered from.
      /// </summary>
      [getter]
      string                  interfaceType;
      /// <summary>
      /// Gets or sets a unique identifier that allows ICE to correlate
      /// candidates that appear on multiple RTCIceTransports.
      /// </summary>
      [getter]
      string                  foundation;
      /// <summary>
      /// Gets or sets the assigned usage priority of the candidate. This
      /// priority represents the priority to choose this candidate over other
      /// candidates as described in [RFC5245]. If
      /// RTCIceParameters.UseUnfreezePriority is false then this priority
      /// also represents the priority in which to unfreeze ICE candidates.
      /// This is automatically populated by the RTC engine and/or browser.
      /// </summary>
      [getter]
      uint32                  priority;
      /// <summary>
      /// Gets or sets the unfreeze priority. If
      /// RTCIceParameters.UseUnfreezePriority is true then this priority is
      /// used to determine the unfreezing search order in which to check ICE
      /// candidates. The higher priority candidates will be searched as
      /// posssible pairings before lower priority candidates. This is a
      /// useful option as setting up a connection via a relay may be faster
      /// than exhaustively searching for the most optimal candidate pairing
      /// which is determined by standard Priority.
      /// </summary>
      /// <see cref="RTCIceParameters" />
      [getter]
      uint32                  unfreezePriority;
      /// <summary>
      /// Gets or sets the protocol of the candidate (UDP/TCP).
      /// </summary>
      [getter]
      RTCIceProtocol          protocol;
      /// <summary>
      /// Gets or sets the IP address of the candidate.
      /// </summary>
      [getter]
      string                  ip;
      /// <summary>
      /// Gets or sets the port for the candidate.
      /// </summary>
      [getter]
      uint16                  port;
      /// <summary>
      /// Gets or sets the type of candidate.
      /// </summary>
      [getter]
      RTCIceCandidateType     candidateType;
      /// <summary>
      /// Gets or sets the type of TCP candidate.
      /// </summary>
      [getter]
      RTCIceTcpCandidateType  tcpType;
      /// <summary>
      /// Gets or sets the related address if not a host candidate type. For
      /// candidates that are derived from others, such as relay or reflexive
      /// candidates, the relatedAddress refers to the candidate that these
      /// are derived from. For host candidates, the RelatedAddress is set to
      /// the empty string.
      /// </summary>
      [getter]
      string                  relatedAddress;
      /// <summary>
      /// Gets or sets the related port if not a host candidate type. For
      /// candidates that are derived from others, such as relay or reflexive
      /// candidates, the relatedPort refers to the host candidate that these
      /// are derived from. For host candidates, the RelatedPort is null.
      /// </summary>
      [getter]
      uint16                  relatedPort;
    };

    /// <summary>
    /// A candidate representing the completed state of the ICE gathering process
    /// which can be marshalled and sent to the remote party to inform of the
    /// local gathering completion process.
    /// </summary>
    struct RTCIceCandidateComplete : RTCIceGathererCandidate
    {
      /// <summary>
      /// This attribute is always present and set to true, indicating that
      /// ICE candidate gathering is complete.
      /// </summary>
      [getter]
      bool complete;
    };

    /// <summary>
    /// The local RTCIceParameters object includes the ICE username fragment
    /// and password and other ICE-related parameters. The RTCIceParameters
    /// object corresponding to a remote peer may also include an iceLite
    /// attribute (set to "true" if the remote peer only supports ICE-lite).
    /// </summary>
    [dictionary]
    struct RTCIceParameters
    {
      /// <summary>
      /// Set this value to true if the remote ICE implementation also
      /// supports the separation of canddiate choise priorty versus
      /// the priority to unfreeze the candidates. This allows the ICE engine
      /// to search for a candidate that is more likely to work before trying
      /// to find the most optimal candidate to use long term.
      /// </summary>
      bool    useUnfreezePriority;
      /// <summary>
      /// The ICE username fragment.
      /// </summary>
      string  usernameFragment;
      /// <summary>
      /// The ICE password.
      /// </summary>
      string  password;
      /// <summary>
      /// If only ICE-lite is supported (true) or not (false or unset). Since
      /// [draft-ietf-rtcweb-transports] Section 3.4 requires client RTC
      /// engines/browsers support for full ICE, IceLite will only be "true"
      /// for a remote peer such as a gateway. GetLocalParameters().IceLite
      /// will not return true.
      /// </summary>
      bool    iceLite;

      /// <summary>
      /// Constructs an empty instance of an RTCIceParameters object.
      /// </summary>
      [constructor, default]
      void RTCIceParameters();
      /// <summary>
      /// Constructs an instance of an RTCIceParameters object by cloning the contents of an existing object.
      /// </summary>
      [constructor, altname(RTCIceParametersClone)]
      void RTCIceParameters(RTCIceParameters source);
      /// <summary>
      /// Constructs an instance of an RTCIceParameters object by extracting object data from a JSON object.
      /// </summary>
      [constructor, default, altname(RTCIceParametersWithJson)]
      void RTCIceParameters(Json json);

      /// <summary>
      /// A helper routine to convert the object's data to structured JSON object data.
      /// </summary>
      Json toJson();
      /// <summary>
      /// Return a hash of the data contained within the object.
      /// </summary>
      string hash();
    };

    /// <summary>
    /// The RTCIceCandidatePair contains the currently selected ICE candidate
    /// pair.
    /// </summary>
    struct RTCIceCandidatePair
    {
      /// <summary>
      /// Gets or sets the local ICE candidate.
      /// </summary>
      RTCIceCandidate local;
      /// <summary>
      /// Gets or sets the remote ICE candidate.
      /// </summary>
      RTCIceCandidate remote;

      /// <summary>
      /// Constructs an empty instance of an RTCIceCandidatePair object.
      /// </summary>
      [constructor, default]
      void RTCIceCandidatePair();
      /// <summary>
      /// Constructs an instance of an RTCIceCandidatePair object by cloning the contents of an existing object.
      /// </summary>
      [constructor, altname(RTCIceCandidatePairClone)]
      void RTCIceCandidatePair(RTCIceCandidatePair source);
      /// <summary>
      /// Constructs an instance of an RTCIceCandidatePair object by extracting object data from a JSON object.
      /// </summary>
      [constructor, default, altname(RTCIceCandidatePairWithJson)]
      void RTCIceCandidatePair(Json json);

      /// <summary>
      /// A helper routine to convert the object's data to structured JSON object data.
      /// </summary>
      Json toJson();
      /// <summary>
      /// Return a hash of the data contained within the object.
      /// </summary>
      string hash();
    };

    /// <summary>
    /// The RTCIceTransportOptions represents the ICE transport options
    /// specified for the RTCIceTransport object.
    /// </summary>
    [dictionary]
    struct RTCIceTransportOptions
    {
      /// <summary>
      /// Gets or sets if aggressive ICE nomination should be used. If true,
      /// the RTCIceTransport will use aggressive ICE nomination. If false,
      /// the RTCICeTransport will use regular ICE nomination.
      /// </summary>
      bool aggressiveIce;
      /// <summary>
      /// Gets of sets the ICE role to use for the ICE transport.
      /// </summary>
      RTCIceRole role = controlled;

      /// <summary>
      /// Constructs an empty instance of an RTCIceTransportOptions object.
      /// </summary>
      [constructor, default]
      void RTCIceTransportOptions();
      /// <summary>
      /// Constructs an instance of an RTCIceTransportOptions object by cloning data from an existing object.
      /// </summary>
      [constructor, altname(RTCIceTransportOptionsClone)]
      void RTCIceTransportOptions(RTCIceTransportOptions source);
      /// <summary>
      /// Constructs an instance of an RTCIceTransportOptions object by extracting object data from a JSON object.
      /// </summary>
      [constructor, altname(RTCIceTransportOptionsWithJson)]
      void RTCIceTransportOptions(Json json);

      /// <summary>
      /// A helper routine to convert the object's data to structured JSON object data.
      /// </summary>
      Json toJson();
      /// <summary>
      /// Return a hash of the data contained within the object.
      /// </summary>
      string hash();
    };
  }
}
