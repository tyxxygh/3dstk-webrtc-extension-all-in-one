/*
 
 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 
 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */

namespace org
{
  namespace ortc
  {
    /// <summary>
    /// The minimum and maximum legal values for an interger value.
    /// </summary>
    [dictionary]
    struct LongRange
    {
      /// <summary>
      /// Gets or sets the minimum value of this property.
      /// </summary>
      long min;
      /// <summary>
      /// Gets or sets the maximum legal value of this property.
      /// </summary>
      long max;

      /// <summary>
      /// Constructs a new minimum and maximum legal range for an integer value.
      /// </summary>
      [constructor, default]
      void LongRange();

      /// <summary>
      /// Constructs a minimum and maximum legal range given an integer value.
      /// </summary>
      [constructor, default, altname(LongRangeWithValue)]
      void LongRange(long value);

      /// <summary>
      /// Constructs a minimum and maximum legal range given an integer minimum and maximum value.
      /// </summary>
      [constructor, default, altname(LongRangeWithLimits)]
      void LongRange(long min, long max);

      /// <summary>
      /// Constructs a minimum and maximum legal range given a JSON object.
      /// </summary>
      [constructor, altname(LongRangeWithJson)]
      void LongRange(Json json);

      /// <summary>
      /// Convert the integer range into a JSON object.
      /// </summary>
      Json toJson();
      /// <summary>
      /// Get a hash value of the integer range.
      /// </summary>
      string hash();
    };

    /// <summary>
    /// The minimum and maximum legal values for an real value.
    /// </summary>
    [dictionary]
    struct DoubleRange
    {
      /// <summary>
      /// Gets or sets the minimum value of this property.
      /// </summary>
      double min;
      /// <summary>
      /// Gets or sets the maximum legal value of this property.
      /// </summary>
      double max;

      /// <summary>
      /// Constructs a new minimum and maximum legal range for a real value.
      /// </summary>
      [constructor, default]
      void DoubleRange();

      /// <summary>
      /// Constructs a minimum and maximum legal range given a real value.
      /// </summary>
      [constructor, default, altname(DoubleRangeWithValue)]
      void DoubleRange(double value);

      /// <summary>
      /// Constructs a minimum and maximum legal range given a real minimum and maximum value.
      /// </summary>
      [constructor, default, altname(DoubleRangeWithLimits)]
      void DoubleRange(double min, double max);

      /// <summary>
      /// Constructs a minimum and maximum legal range given a JSON object.
      /// </summary>
      [constructor, altname(DoubleRangeWithJson)]
      void DoubleRange(Json json);

      /// <summary>
      /// Convert the real number range into a JSON object.
      /// </summary>
      Json toJson();
      /// <summary>
      /// Get a hash value of a real value range.
      /// </summary>
      string hash();
    }

  }
}
