/*

 Copyright (c) 2017, Optical Tone Ltd.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 The views and conclusions contained in the software and documentation are those
 of the authors and should not be interpreted as representing official policies,
 either expressed or implied, of the FreeBSD Project.
 
 */

namespace org
{
  namespace ortc
  {
    /// <summary>
    /// This object is fired if an SSRC conflict is detected within the RTP
    /// session or an SSRC misconfiguration is detected after Send() or
    /// Receive() returns or when SetTransport() is called.
    /// </summary>
    struct RTCSsrcConflictEvent
    {
      [constructor, delete]
      void RTCSsrcConflictEvent();

      /// <summary>
      /// Gets the ssrc attribute represents the conflicting SSRC that caused
      /// the event.
      /// </summary>
      [getter]
      SsrcType ssrc;
    };
  
    /// <summary>
    /// The RTCRtpSender includes information relating to the RTP sender.
    /// </summary>
    interface RTCRtpSender : RTCStatsProvider
    {
      /// <summary>
      /// Constructs an instance of an RTCRtpSender from an MediaStreamTrack
      /// object and associated to an RTCDtlsTransport. If an attempt is made
      /// to construct an RTCRtpSender object with transport.State 
      /// "closed", or if track.readyState is "ended", throw an
      /// InvalidStateError exception.
      /// </summary>
      [constructor]
      void RTCRtpSender(
                        MediaStreamTrack track,
                        RTCRtpTransport transport,
                        ) throws (InvalidParameters, InvalidStateError);

      /// <summary>
      /// Constructs an instance of an RTCRtpSender from an MediaStreamTrack
      /// object and associated to an RTCDtlsTransport. If an attempt is made
      /// to construct an RTCRtpSender object with transport.State or
      /// rtcpTransport.State "closed", or if track.readyState is "ended",
      /// throw an InvalidStateError exception.
      /// </summary>
      [constructor, altname(RTCRtpSenderWithRtcpTransport)]
      void RTCRtpSender(
                        MediaStreamTrack track,
                        RTCRtpTransport transport,
                        RTCRtcpTransport rtcpTransport
                        ) throws(InvalidParameters, InvalidStateError);

      /// <summary>
      /// Gets a unique object instance identifier for this object.
      /// </summary>
      [getter]
      puid objectId;

      /// <summary>
      /// Get the associated MediaStreamTrack instance.
      /// </summary>
      [getter]
      MediaStreamTrack track;

      /// <summary>
      /// Gets the RTCDtlsTransport instance over which RTCP is sent and
      /// received. When BUNDLE is used, many RTCRtpSender objects will share
      /// one rtcpTransport and will all send and receive RTCP over the same
      // RTCDtlsTransport. When RTCP mux is used, rtcpTransport will be null,
      /// and both RTP and RTCP traffic will flow over the RTCDtlsTransport
      /// transport.
      /// </summary>
      [getter]
      RTCRtpTransport transport;

      /// <summary>
      /// Gets the associated RTCP RTCDtlsTransport instance if one was
      /// provided in the constructor. When RTCP mux is used, rtcpTransport
      /// will be null, and both RTP and RTCP traffic will flow over the
      /// RTCDtlsTransport transport.
      /// </summary>
      [getter, nullable]
      RTCRtcpTransport rtcpTransport;

      /// <summary>
      /// Set the RTP RTCDtlsTransport. If the last call to
      /// sender.Send(parameters) had parameters.rtcp.mux set to false,
      /// throw an InvalidParameters exception. If SetTransport() is called
      /// when transport.State is "closed", throw an InvalidStateError
      /// exception.
      /// </summary>
      void setTransport(
                        RTCRtpTransport transport,
                        ) throws (InvalidParameters, InvalidStateError);
      /// <summary>
      /// Set the RTP RTCDtlsTransport and RTCP RTCDtlsTransport. If
      /// SetTransport() is called when transport.State or rtcpTransport.State
      /// is "closed", throw an InvalidStateError exception.
      /// </summary>
      [altname(setTransportWithRtcpTransport)]
      void setTransport(
                        RTCRtpTransport transport,
                        RTCRtcpTransport rtcpTransport
                        ) throws(InvalidParameters, InvalidStateError);

      /// <summary>
      /// Attempts to replace the track being sent with another track provided.
      /// </summary>
      zs::Promise setTrack(MediaStreamTrack track) throws(InvalidParameters, InvalidStateError);

      /// <summary>
      /// Obtain the sender capabilities, based on kind. Capabilities such as
      /// retransmission [RFC4588], redundancy [RFC2198], and Forward Error
      /// Correction that do not have an associated value of kind are always
      /// included, regardless of the value of kind passed to
      /// GetCapabilities().
      /// </summary>
      [static]
      RTCRtpCapabilities getCapabilities([optional] MediaStreamTrackKind kind);

      /// <summary>
      /// Media to be sent is controlled by parameters. If Send() is called
      /// with invalid parameters, throw an InvalidParameters exception. If
      /// rtcpTransport is not set and Send(parameters) is called with
      /// parameters.rtcp.mux set to "false", throw an InvalidParameters
      /// exception. For each value of i from 0 to the number of encodings,
      /// check whether parameters.encodings[i].codecPayloadType corresponds
      /// to a value of parameters.codecs[j].payloadType where j goes from 0
      /// to the number of codecs. If parameters.codecs[j].name is equal to
      /// "red", "cn", "dtmf", "rtx" or a forward error correction codec,
      /// throw an InvalidParameters exception. For each value of i from 0 to
      /// the number of codecs, check that each value of
      /// parameters.codecs[i].name not equal to "red", "rtx" or a forward
      /// error correction codec is included in
      /// GetCapabilities(track.kind).codecs[j].name, where j goes from 0 to
      /// the number of codecs. If a match is not found for any value of i,
      /// throw an InvalidParameters exception. If parameters.encodings is
      /// unset, the browser behaves as though a single encodings[0] entry was
      /// provided, with encodings[0].ssrc set to a browser-determined value,
      /// encodings[0].active set to "true", encodings[0].codecPayloadType set
      /// to codecs[j].payloadType where j is the index of the first codec
      /// that is not "cn", "dtmf", "red", "rtx" or a forward error correction
      /// codec, and all the other parameters.encodings[0] attributes (e.g.
      /// fec, rtx, priority, maxBitrate, minQuality, resolutionScale,etc.)
      /// unset. Calling Send(parameters) does not update parameters based on
      /// what is currently being sent. The RTCRtpSender object starts sending
      /// when Send() is called for the first time, and changes the sending
      /// parameters when send() is called again. The RTCRtpSender object
      /// stops sending when stop() is called. SSRC misusage results in an
      /// InvalidParameters exception.
      /// </summary>
      zs::Promise send(RTCRtpParameters parameters) throws (InvalidParameters, InvalidStateError);

      /// <summary>
      /// Stops sending the track on the wire, and sends an RTCP BYE. Stop is
      /// final as in
      /// </summary>
      void stop();

      /// <summary>
      /// The OnSsrcConflict event handler, of event handler type
      /// RTCSsrcConflictEvent, is fired if an SSRC conflict is detected
      /// within the RTP session or an SSRC misconfiguration is detected
      /// after Send() or Receive() returns or when SetTransport() is called.
      /// In this situation, the RTCRtpSender automatically sends an RTCP BYE
      /// on the conflicted SSRC, if RTP packets were sent using that SSRC.
      /// </summary>
      [event]
      void onSsrcConflict(RTCSsrcConflictEvent conflict);
    };
  }
}
