# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

config("config_winuwp") {
  if (is_winuwp) {
    include_dirs = [ "." ]
  }
}

config("config_force_include_std") {
  if (is_winuwp) {
    cflags_c = [
      "/FIwinuwp_compat_std.h"
    ]
    cflags = [
      "/FIwinuwp_compat_std.h"
    ]
  }
}

source_set("force_include_std") {
  if (is_winuwp) {
    public_configs = [
      ":config_force_include_std",
      ":config_winuwp",
    ]
    public_deps = [ ":winuwp_compat" ]
  }
}

config("config_force_include_win") {
  if (is_winuwp) {
    cflags_c = [
      "/FIwinuwp_compat_win.h"
    ]
    cflags = [
      "/FIwinuwp_compat_win.h"
    ]
  }
}

source_set("force_include_win") {
  if (is_winuwp) {
    public_configs = [
      ":config_force_include_win",
      ":config_winuwp",
    ]
    public_deps = [ ":winuwp_compat" ]
  }
}

source_set("force_include_all") {
  if (is_winuwp) {
    public_configs = [
      ":config_force_include_std",
      ":config_force_include_win",
      ":config_winuwp",
    ]
    public_deps = [ ":winuwp_compat" ]
  }
}

config("config_wrap_main_plain_c") {
  if (is_winuwp) {
    cflags_c = [
      "/FIwinuwp_compat_wrap_main_plain_c.h"
    ]
    cflags = [
      "/FIwinuwp_compat_wrap_main_plain_c.h"
    ]
  }
}

config("config_wrap_main_plain_cc") {
  if (is_winuwp) {
    cflags_c = [
      "/FIwinuwp_compat_wrap_main_plain_cc.h"
    ]
    cflags = [
      "/FIwinuwp_compat_wrap_main_plain_cc.h"
    ]
  }
}

config("config_wrap_main_utf8_c") {
  if (is_winuwp) {
    cflags_c = [
      "/FIwinuwp_compat_wrap_main_utf8_c.h"
    ]
    cflags = [
      "/FIwinuwp_compat_wrap_main_utf8_c.h"
    ]
  }
}

config("config_wrap_main_utf8_cc") {
  if (is_winuwp) {
    cflags_c = [
      "/FIwinuwp_compat_wrap_main_utf8_cc.h"
    ]
    cflags = [
      "/FIwinuwp_compat_wrap_main_utf8_cc.h"
    ]
  }
}

config("config_wrap_main_utf16_c") {
  if (is_winuwp) {
    cflags_c = [
      "/FIwinuwp_compat_wrap_main_utf16_c.h"
    ]
    cflags = [
      "/FIwinuwp_compat_wrap_main_utf16_c.h"
    ]
  }
}

config("config_wrap_main_utf16_cc") {
  if (is_winuwp) {
    cflags_c = [
      "/FIwinuwp_compat_wrap_main_utf16_cc.h"
    ]
    cflags = [
      "/FIwinuwp_compat_wrap_main_utf16_cc.h"
    ]
  }
}

source_set("wrap_main_plain_c") {
  if (is_winuwp) {
    public_configs = [
      ":config_wrap_main_plain_c",
      ":config_winuwp",
    ]
    public_deps = [ ":winuwp_compat" ]
    sources = [ "winuwp_compat_wrap_main_plain_c.cc" ]
  } else {
    sources = [ "winuwp_compat_noop.cc" ]
  }
}

source_set("wrap_main_plain_cc") {
  if (is_winuwp) {
    public_configs = [
      ":config_wrap_main_plain_cc",
      ":config_winuwp",
    ]
    public_deps = [ ":winuwp_compat" ]
    sources = [ "winuwp_compat_wrap_main_plain_cc.cc" ]
  } else {
    sources = [ "winuwp_compat_noop.cc" ]
  }
}

source_set("wrap_main_utf8_c") {
  if (is_winuwp) {
    public_configs = [
      ":config_wrap_main_utf8_c",
      ":config_winuwp",
    ]
    public_deps = [ ":winuwp_compat" ]
    sources = [ "winuwp_compat_wrap_main_utf8_c.cc" ]
  } else {
    sources = [ "winuwp_compat_noop.cc" ]
  }
}

source_set("wrap_main_utf8_cc") {
  if (is_winuwp) {
    public_configs = [
      ":config_wrap_main_utf8_cc",
      ":config_winuwp",
     ]
    public_deps = [ ":winuwp_compat" ]
    sources = [ "winuwp_compat_wrap_main_utf8_cc.cc" ]
  } else {
    sources = [ "winuwp_compat_noop.cc" ]
  }
}

source_set("wrap_main_utf16_c") {
  if (is_winuwp) {
    public_configs = [
      ":config_wrap_main_utf16_c",
      ":config_winuwp",
    ]
    public_deps = [ ":winuwp_compat" ]
    sources = [ "winuwp_compat_wrap_main_utf16_c.cc" ]
  } else {
    sources = [ "winuwp_compat_noop.cc" ]
  }
}

source_set("wrap_main_utf16_cc") {
  if (is_winuwp) {
    public_configs = [
      ":config_wrap_main_utf16_cc",
      ":config_winuwp",
    ]
    public_deps = [ ":winuwp_compat" ]
    sources = [ "winuwp_compat_wrap_main_utf16_cc.cc" ]
  } else {
    sources = [ "winuwp_compat_noop.cc" ]
  }
}

config("ignore_threading_model_warning") {
  if (is_winuwp) {
    cflags_c = [
      "/wd4447"
    ]
    cflags = [
      "/wd4447"
    ]
  }
}

static_library("winuwp_compat") {
  if (is_winuwp) {
    sources = [
      "winuwp_compat_std.cc",
      "winuwp_compat_std.h",
      "winuwp_compat_win.cc",
      "winuwp_compat_win.h",
      "winuwp_compat_internal.cc",
      "winuwp_compat_internal.h",
    ]

    public_configs = [ ":config_winuwp" ]

    include_dirs = [ "./" ]
  } else {
    sources = []
  }
  sources += [ "winuwp_compat_noop.cc" ]
}
